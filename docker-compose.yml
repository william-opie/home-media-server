services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
      - "53:53/udp"
    environment:
      - TZ=${TIMEZONE}
      - WEBPASSWORD=${PIHOLE_ADMIN_PASSWORD}
      - FTLCONF_LOCAL_IPV4=${LAN_IP}
      - FTLCONF_dns_upstreams=${UPSTREAM_DNS}
      - PIHOLE_DNS_=${UPSTREAM_DNS}
      - REV_SERVER=true
      - REV_SERVER_TARGET=${ROUTER_IP}
      - REV_SERVER_CIDR=${LAN_CIDR}
    # Volumes store your data between container upgrades
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    restart: unless-stopped
    labels:
      - homepage.group=Networking
      - homepage.name=Pi-hole
      - homepage.icon=https://wp-cdn.pi-hole.net/wp-content/uploads/2016/12/Vortex-R.png.webp
      - homepage.href=${PIHOLE_URL}
      - homepage.description=DNS server w/ ad blocking
      - homepage.weight=0
      - homepage.widget.type=pihole
      - homepage.widget.url=http://pihole
      - homepage.widget.key=${PIHOLE_API_KEY}
      - homepage.widget.version=6
      # Following label disables watchtower from applying automatic updates to pihole container
      - com.centurylinklabs.watchtower.enable=false
    profiles:
      - pihole

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_ROOT}:/data
      - ${CONFIG_ROOT:-.}/jellyfin:/config
    ports:
      - "7359:7359/udp"
      - "1900:1900/udp"
    restart: 'always'
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8096/health" ]
      interval: 30s
      retries: 10
#  Below config is for Nvidia GPU hardware acceleration-- uncomment if needed
#    deploy:
#      resources:
#        reservations:
#          devices:
#          - driver: nvidia
#            count: all
#            capabilities: [gpu]
    labels:
      - homepage.group=Media
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.href=${JELLYFIN_URL}
      - homepage.description=Media server
      - homepage.weight=3
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096
      - homepage.widget.key=${JELLYFIN_API_KEY}
  
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sonarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      qbittorrent:
        condition: service_started
      vpn:
        condition: service_healthy
    labels:
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=${SONARR_URL}
      - homepage.description=Series management
      - homepage.weight=0
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://vpn:8989/sonarr
      - homepage.widget.key=${SONARR_API_KEY}

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/radarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:7878/radarr/ping", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      qbittorrent:
        condition: service_started
      vpn:
        condition: service_healthy
    labels:
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=${RADARR_URL}
      - homepage.description=Movies management
      - homepage.weight=1
      - homepage.widget.type=radarr
      - homepage.widget.url=http://vpn:7878/radarr
      - homepage.widget.key=${RADARR_API_KEY}

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/lidarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8686/lidarr/ping", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      qbittorrent:
        condition: service_started
      vpn:
        condition: service_healthy
    labels:
      - homepage.group=Media
      - homepage.name=Lidarr
      - homepage.icon=lidarr.png
      - homepage.href=${LIDARR_URL}
      - homepage.description=Music management
      - homepage.weight=2
      - homepage.widget.type=lidarr
      - homepage.widget.url=http://vpn:8686/lidarr
      - homepage.widget.key=${LIDARR_API_KEY}

  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/bazarr/config:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:6767/bazarr/ping", "https://google.com" ]
      interval: 5s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      qbittorrent:
        condition: service_started
      vpn:
        condition: service_healthy
    labels:
      - homepage.group=Download
      - homepage.name=Bazarr
      - homepage.icon=bazarr.png
      - homepage.href=${BAZARR_URL}
      - homepage.description=Subtitles management
      - homepage.weight=4
      - homepage.widget.type=bazarr
      - homepage.widget.url=http://vpn:6767/bazarr
      - homepage.widget.key=${BAZARR_API_KEY}

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/jellyseerr:/app/config
    restart: always
    healthcheck:
      test: ["CMD", "wget", "http://127.0.0.1:5055/api/v1/status", "-qO", "/dev/null"]
      interval: 30s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=JellySeerr
      - homepage.icon=jellyseerr.png
      - homepage.href=${JELLYSEERR_URL}
      - homepage.description=Content Recommendations and Request Management
      - homepage.weight=2
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5055
      - homepage.widget.key=${JELLYSEERR_API_KEY}

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/prowlarr:/config
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:9696/prowlarr/ping", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      qbittorrent:
        condition: service_started
      vpn:
        condition: service_healthy
    labels:
      - homepage.group=Download
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=${PROWLARR_URL}
      - homepage.description=Indexers management
      - homepage.weight=1
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://vpn:9696/prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}
  
  kiwix:
    image: ghcr.io/kiwix/kiwix-serve:latest
    container_name: kiwix
    volumes:
      - ${DATA_ROOT}/media/zim:/data
    command:
      - '*.zim'
    profiles:
      - kiwix

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: always
    network_mode: "service:vpn"
    depends_on:
      qbittorrent:
        condition: service_started
      vpn:
        condition: service_healthy
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent
    volumes:
      - ${CONFIG_ROOT:-.}/qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: always
    healthcheck:
      # Container may fail if the PIA's token expired, so mark as unhealthy when there is no internet connection
      # see: https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8080", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - homepage.group=Download
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=${QBITTORRENT_URL}
      - homepage.description=Bittorrent client
      - homepage.weight=2
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://vpn:8080
      - homepage.widget.username=${QBITTORRENT_USERNAME}
      - homepage.widget.password=${QBITTORRENT_PASSWORD}

  vpn:
    image: thrnz/docker-wireguard-pia
    container_name: vpn
    volumes:
      - ${CONFIG_ROOT:-.}/pia:/pia
      - ${CONFIG_ROOT:-.}/pia-shared:/pia-shared
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - LOC=${PIA_LOCATION}
      - USER=${PIA_USER}
      - PASS=${PIA_PASS}
      - LOCAL_NETWORK=${PIA_LOCAL_NETWORK}
      - PORT_FORWARDING=1
      - PORT_PERSIST=1
      - PORT_SCRIPT=/pia-shared/portupdate-qbittorrent.sh
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    labels:
      # network mode is not supported: https://github.com/containrrr/watchtower/issues/1286#issuecomment-1214291660
      - com.centurylinklabs.watchtower.enable=false

  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    volumes:
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: always
    user: ${USER_ID}:${GROUP_ID}
    environment:
      - TZ=${TIMEZONE}
      - UN_SONARR_0_URL=http://vpn:8989/sonarr
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://vpn:7878/radarr
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
      - UN_LIDARR_0_URL=http://vpn:8686/lidarr
      - UN_LIDARR_0_API_KEY=${LIDARR_API_KEY}
    security_opt:
      - no-new-privileges:true

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=${HOMEPAGE_ALLOWED_HOSTS}
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
    volumes:
      - ./homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}:/data
    restart: always
    depends_on:
      qbittorrent:
        condition: service_started
    command: [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]

  caddy:
    image: slothcroissant/caddy-cloudflaredns:latest
    container_name: caddy
    restart: unless-stopped
    security_opt:
      - label:disable
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    environment:
      - DOMAIN=${DOMAIN}
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    volumes:
      - ./container-data/data:/data
      - ./container-config:/etc/caddy
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      homepage:
        condition: service_started
  
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - WEBHOOK_URL=${WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  default:
    name: docker-compose-nas